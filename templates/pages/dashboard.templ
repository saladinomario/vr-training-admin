// templates/pages/dashboard.templ
package pages

import (
	"github.com/saladinomario/vr-training-admin/internal/models"
	"github.com/saladinomario/vr-training-admin/templates/components"
	"github.com/saladinomario/vr-training-admin/templates/components/sessions"
)

templ Dashboard() {
    @components.Layout("Dashboard") {
        <div id="main-content" hx-get="/dashboard-content" hx-trigger="load, every 10s">
            <!-- Content will be loaded via HTMX -->
        </div>
    }
}

templ DashboardContent(recentSessions []*sessions.Session, status models.SystemStatus) {
    <div class="container mx-auto p-6">
        <!-- Main Stats Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <!-- Scenarios Overview -->
            <div class="card bg-base-100 shadow-xl">
                <div class="card-body">
                    <h2 class="card-title">
                        <span class="text-primary">Training Scenarios</span>
                    </h2>
                    <div class="stats shadow">
                        <div class="stat">
                            <div class="stat-title">Active</div>
                            <div class="stat-value">3</div>
                            <div class="stat-desc">Training scenarios ready</div>
                        </div>
                    </div>
                    <div class="card-actions justify-end">
                        <a href="/scenarios" class="btn btn-primary btn-sm">Manage Scenarios</a>
                    </div>
                </div>
            </div>

            <!-- Avatar Stats -->
            <div class="card bg-base-100 shadow-xl">
                <div class="card-body">
                    <h2 class="card-title">
                        <span class="text-secondary">Training Avatars</span>
                    </h2>
                    <div class="stats shadow">
                        <div class="stat">
                            <div class="stat-title">Configured</div>
                            <div class="stat-value">2</div>
                            <div class="stat-desc">Active training avatars</div>
                        </div>
                    </div>
                    <div class="card-actions justify-end">
                        <a href="/avatars" class="btn btn-secondary btn-sm">Configure Avatars</a>
                    </div>
                </div>
            </div>

            <!-- Observer Setup -->
            <div class="card bg-base-100 shadow-xl">
                <div class="card-body">
                    <h2 class="card-title">
                        <span class="text-accent">Training Observer</span>
                    </h2>
                    <div class="stats shadow">
                        <div class="stat">
                            <div class="stat-title">Status</div>
                            <div class="stat-value text-success">2 Active</div>
                            <div class="stat-desc">Monitoring sessions</div>
                        </div>
                    </div>
                    <div class="card-actions justify-end">
                        <a href="/observers" class="btn btn-accent btn-sm">Observer Settings</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Start Session and Recent Activity -->
        <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 mt-8">
            <!-- Start New Session Card -->
            <div class="lg:col-span-1">
                <div class="card bg-base-100 shadow-xl">
                    <div class="card-body">
                        <h2 class="card-title">Start Session</h2>
                        <p class="text-sm">Launch a new VR training session with your selected scenario, avatar, and observer.</p>
                        <div class="card-actions justify-center mt-4">
                            <a href="/sessions/new" class="btn btn-primary btn-wide">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
                                </svg>
                                Start Training
                            </a>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- System status -->
            <div class="lg:col-span-2 card bg-base-100 shadow-xl">
                <div class="card-body">
                    <h2 class="card-title">
                        <span class="text-accent">System Status</span>
                    </h2>
                    <div class="stats stats-vertical lg:stats-horizontal shadow w-full">
                        <div class="stat">
                            <div class="stat-title">Unreal Engine</div>
                            <div class={getStatusStyle(status.UnrealEngineConnected)}>
                                if status.UnrealEngineConnected {
                                    Connected
                                } else {
                                    Disconnected
                                }
                            </div>
                            <div class="stat-desc">
                                if status.UnrealEngineReady {
                                    Ready to receive data
                                } else {
                                    Not ready
                                }
                            </div>
                        </div>
                        <div class="stat">
                            <div class="stat-title">WebSocket</div>
                            <div class={getStatusStyle(status.WebSocketConnected)}>
                                if status.WebSocketConnected {
                                    Connected
                                } else {
                                    Disconnected
                                }
                            </div>
                            <div class="stat-desc">Active Connections</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Recent Activity -->
            <div class="lg:col-span-3">
                <div id="recent-activity">
                    @RecentActivity(recentSessions)
                </div>
            </div>
        </div>
    </div>
}

templ RecentActivity(recentSessions []*sessions.Session) {
    <div class="card bg-base-100 shadow-xl">
        <div class="card-body">
            <h2 class="card-title mb-4">Recent Activity</h2>
            
            @sessions.SessionList(recentSessions)
            
            <div class="card-actions justify-end mt-4">
                <a href="/sessions" class="btn btn-ghost btn-sm">View All Sessions (TODO)</a>
            </div>
        </div>
    </div>
}

// getStatusStyle returns the appropriate class based on the status
func getStatusStyle(status bool) string {
    if status {
        return "stat-value text-success"
    } else {
        return "stat-value text-error"
    }
}